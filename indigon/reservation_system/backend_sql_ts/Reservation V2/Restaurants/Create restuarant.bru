meta {
  name: Create Restaurant
  type: http
  seq: 1
}

post {
  url: http://127.0.0.1:3000/api/restaurant/66048a99102de42875e0af4d
  body: multipartForm
  auth: none
}

body:multipart-form {
  name: Best restaurant
  photos: @file(/C:/Users/SHAGOR/Downloads/Group 25 (2)-svg.png|/C:/Users/SHAGOR/Downloads/Group 25 (2)-svg.png)
  description: Hello
}

tests {
  test("Response status code is 200", function () {
    expect(res.getStatus()).to.equal(200);
  });
  
  
  test("Response has the required fields - status, message, and data", function () {
    const responseData = res.getBody();
    
    expect(responseData).to.be.an('object');
    expect(responseData).to.have.property('status');
    expect(responseData).to.have.property('message');
    expect(responseData).to.have.property('data');
  });
  
  
  test("Name is a non-empty string", function () {
    const responseData = res.getBody();
    
    expect(responseData).to.be.an('object');
    expect(responseData.data.name).to.be.a('string').and.to.have.lengthOf.at.least(1, "Name should not be empty");
  });
  
  
  test("User ID is an array with at least one element", function () {
      const responseData = res.getBody();
      
      expect(responseData.data.userId).to.exist.and.to.be.an('array').that.has.lengthOf.at.least(1);
  });
  
  
  test("Location ID is an array with at least one element", function () {
      const responseData = res.getBody();
      
      expect(responseData.data.locationId).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);
  });
}
